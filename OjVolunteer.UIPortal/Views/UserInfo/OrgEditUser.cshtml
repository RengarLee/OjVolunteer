@model OjVolunteer.Model.UserInfo

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>UserInfoDetail</title>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-table/bootstrap-table.css" rel="stylesheet" />

    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
    <script src="~/Scripts/simple-ajax-form.js"></script>
    <script src="~/Content/bootstrap-table/bootstrap-table.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Content/bootstrap-table/bootstrap-table-zh-CN.js"></script>
    <script src="~/Scripts/datapattern.js"></script>
    <script type="text/javascript">
        $(function () {
            $("#resetPwd").click(function () {
                $.post("/UserInfo/ResetPwd", { "id": $("#UserInfoID").val() }, function (data) {
                    if (data == "success") {
                        alert("密码重置为000000");
                    } else {
                        alert("重置失败,请稍后再试");
                    }
                })

            });
            initTable_talk();
        });

        function initTable_talk(queryParam) {
            $("#tb_talks").bootstrapTable('destroy');
            $('#tb_talks').bootstrapTable({
                contentType: "application/x-www-form-urlencoded",
                url: '/Talks/GetTalkByUserId',
                method: 'post',
                toolbar: '#toolbar',
                striped: true,
                cache: false,
                pagination: true,
                queryParams: function (param) {
                    var temp = {
                        limit: param.limit,
                        offset: param.offset,
                        userId: @Model.UserInfoID,
                    };
                    return temp;
                },
                sidePagination: "server",
                pageNumber: 1,
                pageSize: 5,
                pageList: [5, 10, 20, 50],
                smartDisplay: false,
                showColumns: true,
                showRefresh: true,
                minimumCountColumns: 3,
                clickToSelect: true,
                uniqueId: "TalkID",
                columns: [
                    {
                        field: 'TalkID',//域值
                        title: 'Id',//标题
                        visible: false,
                        align: 'center',
                        width: '6%',

                    },
                    {
                        field: 'TalkFavorsNum',//域值
                        title: '点赞数',//标题
                        visible: true,//false表示不显示
                        width: '6%',
                        align: 'center',
                    },
                    {
                        field: 'TalkContent',//域值
                        title: '心得内容',//标题
                        visible: true,//false表示不显示
                        width: '6%',
                        align: 'center',
                        formatter: function (value, row, index) {
                            var s = String(value).substr(0,20)+"...";
                            return s;
                        }
                    },
                    {
                        field: 'TalkFavorsNum',//域值
                        title: '点赞数',//标题
                        visible: true,//false表示不显示
                        width: '6%',
                        align: 'center',

                    },
                    {
                        field: 'CreateTime',//域值
                        title: '创建时间',//标题
                        visible: false,//false表示不显示
                        width: '6%',
                        align: 'center',
                        formatter: function (value, row, index) {
                            return new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10)).pattern("yyyy-MM-dd HH:mm");
                        }
                    },
                    {
                        field: 'ModfiedOn',//域值
                        title: '最后更新时间',//标题
                        visible: false,//false表示不显示
                        width: '6%',
                        align: 'center',
                        formatter: function (value, row, index) {
                            return new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10)).pattern("yyyy-MM-dd HH:mm");
                        }
                    },
                    {
                        field: 'Status',
                        title: '状态',
                        visible: true,
                        width: '6%',
                        align: 'center',
                        formatter: function (value, row, index) {
                            if (row["Status"] == 2) {
                                return '未审核';
                            } else if (row["Status"] == 1) {
                                return '已删除';
                            } else if (row["Status"] == 0) {
                                return '正常'
                            }
                        },
                        filterControl: 'input',
                    }, {
                        field: 'operate',
                        title: '操作',
                        align: 'center',
                        width: '25%',
                        formatter: operateTalkFormatter,
                    }
                ],
                onLoadSuccess: function (data) {
                    $(".detailTalkLink").click(function () {
                        var index = layer.open({
                            type: 2,
                            title: false,
                            closeBtn: 0,
                            maxmin: false,
                            shadeClose: true, //点击遮罩关闭层
                            area: ['600px', '700px'],
                            content: '/Talks/TalkDetail/' + $(this).attr("uid")
                        });
                    });
                },
            });
        };
        function operateTalkFormatter(value, row, index) {
            return [
                '<a  href="javascript:void(0)" class="detailTalkLink" uid="' + row['TalkID'] + '">',
                '<i class="glyphicon glyphicon-ok"></i>&nbsp;&nbsp;<span>查看详情</span>',
                '</a>&nbsp;&nbsp;&nbsp;&nbsp;"',
                '<a href="/Talks/TalkDetail/'+ row['TalkID'] + '">Test</a>'
            ].join('');
        }
    </script>
</head>
<body>
    @using (Html.BeginForm())
    {
        <div class="form-horizontal">
            <h4>UserInfo</h4>
            <hr />
            @Html.HiddenFor(model => model.UserInfoID)
            @Html.HiddenFor(model => model.UserInfoPwd, new { htmlAttributes = new { @class = "form-control" } })
            @Html.HiddenFor(model => model.UpdatePoliticalID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.HiddenFor(model => model.UserInfoIcon, new { htmlAttributes = new { @class = "form-control" } })

            <img width="100px" height="100px" src="@Model.UserInfoIcon" />
            <button type="button" id="resetPwd">重置密码</button>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoLoginId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoLoginId, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoStuId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoStuId, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoShowName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoShowName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoPhone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoPhone, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoEmail, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MajorID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MajorID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MajorID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DepartmentID, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PoliticalID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PoliticalID, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrganizeInfoID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrganizeInfoID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrganizeInfoID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserInfoLastTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoLastTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserInfoLastTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ModfiedOn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ModfiedOn, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ModfiedOn, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>


            <div>
                @Html.LabelFor(model => model.UserInfoTalkCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserInfoTalkCount, new { htmlAttributes = new { @class = "form-control" } })

                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        <div>
            <table id="tb_talks"></table>
        </div>
    </div>

    <div>
        <div>
            <table id="tb_activity"></table>
        </div>
    </div>
</body>
</html>
