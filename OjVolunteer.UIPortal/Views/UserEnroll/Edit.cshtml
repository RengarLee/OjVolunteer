@model OjVolunteer.Model.UserEnroll

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
    <link href="~/Content/layui/css/layui.css" rel="stylesheet" />
    <link href="~/Content/oj/css/admin.css" rel="stylesheet" />
    <style>
        .layui-form-pane .layui-form-label {
            overflow: visible;
        }
        .stuInfo-form{
            width:auto;
        }
    </style>
</head>
<body>
    <form class="layui-form layui-form-pane stuInfo-form">

        <div class="layui-form-item">
            <label class="layui-form-label">签到时间</label>
            <div class="layui-input-block">
                <input type="text" name="title" class="layui-input" id="timeRange" lay-verify="require">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">签退时间</label>
            <div class="layui-input-block">
                <input type="text" name="title" class="layui-input" id="timeEnrollRange" lay-verify="require">
            </div>
        </div>
        <div class="footer-btn">
            <div class="layui-form-item">
                <button class="layui-btn" lay-submit id="need" lay-filter="up">保存</button>
            </div>
        </div>
    </form>
    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Content/layui/layui.all.js"></script>
    <script src="~/Content/oj/js/check.js"></script>
    <script>
        //验证签到时间是否比退时间晚
        var BaoCun = $('#need');
        var timeRange = $('#timeRange');
        var timeEnrollRange = $('#timeEnrollRange');
        BaoCun.click(function () {
            if (timeEnrollRange.val() > timeRange.val())
                ture;
            else {
                alert("时间选择错误，签退时间应该比签到时间晚！");
            }
        });
        //日期组件
        layui.use('laydate', function () {
            var laydate = layui.laydate;
            laydate.render({
                elem: '#timeRange',
                type: 'datetime'
            });

            var laydate1 = layui.laydate;
            laydate.render({
                elem: '#timeEnrollRange',
                type: 'datetime'
            });
        });
    </script>
    @*@using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>这是一个测试</h4>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.UserEnrollID)

                <div class="form-group">
                    @Html.LabelFor(model => model.ActivityID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ActivityID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ActivityID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserInfoID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserInfoID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserInfoID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserEnrollStart, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserEnrollStart, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserEnrollStart, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserEnrollActivityStart, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserEnrollActivityStart, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserEnrollActivityStart, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserEnrollActivityEnd, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserEnrollActivityEnd, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserEnrollActivityEnd, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ModfiedOn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ModfiedOn, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModfiedOn, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ActivityTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ActivityTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ActivityTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }*@

    @*<div>
            @Html.ActionLink("Back to List", "Index")
        </div>*@

</body>
</html>
